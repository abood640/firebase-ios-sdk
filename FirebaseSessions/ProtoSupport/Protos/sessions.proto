// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "clientanalytics.proto";

package firebase.appquality;

// Contains the relevant information around an App Quality Session.
// See go/app-quality-unified-session-definition for more details.
message SessionEvent {
  // The type of event being reported.
  EventType event_type = 1;
  // A globally unique identifier for the session.
  string session_id = 2;
  // The unique identifier for the session that preceded this one on the device.
  string previous_session_id = 3;
  // Identifies a unique device+app installation: go/firebase-installations
  string firebase_installation_id = 4;
  // The device-reported timestamp at which the event occurred.
  int64 event_timestamp_us = 5;
  // Any sampling rate being applied to these events on device.
  // 1.0 implies no sampling.
  float sampling_rate = 6;
  // Information about the running application.
  ApplicationInfo application_info = 7;
  // The data collection status for each related SDK.
  DataCollectionStatus data_collection_status = 8;
}

// Enum denoting all possible session event types.
enum EventType {
  EVENT_UNKNOWN = 0;
  // This event type is fired as soon as a new session begins.
  EVENT_SESSION_START = 1;
}

// Contains the data collection status for each related SDK.
message DataCollectionStatus {
  // The collection status of the FirePerf SDK.
  DataCollectionState performance = 1;
  // The collection status for the Crashlytics SDK.
  DataCollectionState crashlytics = 2;
}

// Enum denoting all possible states for SDK data collection.
enum DataCollectionState {
  COLLECTION_UNKNOWN = 0;
  COLLECTION_SDK_NOT_INSTALLED = 1;
  COLLECTION_ENABLED = 2;
  COLLECTION_DISABLED = 3;
  COLLECTION_DISABLED_VIA_SETTINGS = 4;
  COLLECTION_SAMPLED = 5;
}

// App-level information collected from the device.
message ApplicationInfo {
  // Commonly known as the GMP App Id
  string app_id = 1;
  // The manufacturer supplied device model name. Eg. 'N5502L'
  string device_model = 2;
  // The development platform used by the app. Eg. 'Unity', 'Flutter'
  string development_platform_name = 3;
  // The version of the development platform in use by the app. Eg. 2020.3.33f1
  string development_platform_version = 4;
  oneof platform_info {
    // App info relevant only to Android apps
    AndroidApplicationInfo android_app_info = 5;
    // App info relevant only to Apple apps
    AppleApplicationInfo apple_app_info = 6;
  }
}

// Android-specific app information
// In addition to these fields, the Firelog SDK also collects:
// - application_build
// - mcc_mnc
// - sdk_version(app's build version)
// - manufacturer
// - model
// - country
// - network_connection_info
message AndroidApplicationInfo {
  // The applications package name. Eg. com.google.search
  string package_name = 1;
  // The version of the Android Firebase-Sessions SDK in use
  string sdk_version = 2;
  // The version name as specified in the app's manifest
  // https://developer.android.com/guide/topics/manifest/manifest-element#vname
  string version_name = 3;
}

// Apple-specific app information
// In addition to these fields, the Firelog SDK also collects:
// - application_build
// - application_version
// - os_full_version
// - model
// - country
message AppleApplicationInfo {
  // The application's bundle id. Eg. com.google.search
  string bundle_short_version = 1;
  // The version of the Apple Firebase-Sessions SDK in use
  string sdk_version = 2;
  // Describes the network connectivity of the device
  NetworkConnectionInfo network_connection_info =
      3;
  // Collects the OS running. Eg. iOS, iPadOs, tvOS, etc.
  OsName os_name = 4;
}

// The name of the operating system on which the application is running.
// Currently Apple only.
enum OsName {
  OS_NAME_UNKNOWN = 0;
  OS_NAME_IOS = 1;
  OS_NAME_IPAD_OS = 2;
  OS_NAME_MAC_OS = 3;
  OS_NAME_TV_OS = 4;
  OS_NAME_WATCH_OS = 5;
}


